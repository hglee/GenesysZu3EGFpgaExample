// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module bd_2d50_csc_0_v_vcresampler_core_Pipeline_VITIS_LOOP_1000_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_out_hresampled_dout,
        stream_out_hresampled_num_data_valid,
        stream_out_hresampled_fifo_cap,
        stream_out_hresampled_empty_n,
        stream_out_hresampled_read,
        stream_out_vresampled_din,
        stream_out_vresampled_num_data_valid,
        stream_out_vresampled_fifo_cap,
        stream_out_vresampled_full_n,
        stream_out_vresampled_write,
        trunc_ln,
        p_read,
        cmp33_i,
        cmp105_i,
        empty_39,
        empty,
        linebuf_c_2_address0,
        linebuf_c_2_ce0,
        linebuf_c_2_we0,
        linebuf_c_2_d0,
        linebuf_c_2_address1,
        linebuf_c_2_ce1,
        linebuf_c_2_q1,
        linebuf_y_address0,
        linebuf_y_ce0,
        linebuf_y_we0,
        linebuf_y_d0,
        linebuf_y_address1,
        linebuf_y_ce1,
        linebuf_y_q1,
        linebuf_c_address0,
        linebuf_c_ce0,
        linebuf_c_we0,
        linebuf_c_d0,
        linebuf_c_q0,
        p_out_i,
        p_out_o,
        p_out_o_ap_vld,
        p_out1_i,
        p_out1_o,
        p_out1_o_ap_vld,
        p_out2_i,
        p_out2_o,
        p_out2_o_ap_vld,
        p_out3_i,
        p_out3_o,
        p_out3_o_ap_vld,
        pix_0_5_0_0_0_load614_i_out_i,
        pix_0_5_0_0_0_load614_i_out_o,
        pix_0_5_0_0_0_load614_i_out_o_ap_vld,
        pix_0_4_0_0_0_load612_i_out_i,
        pix_0_4_0_0_0_load612_i_out_o,
        pix_0_4_0_0_0_load612_i_out_o_ap_vld,
        pix_0_3_0_0_0_load610_i_out_i,
        pix_0_3_0_0_0_load610_i_out_o,
        pix_0_3_0_0_0_load610_i_out_o_ap_vld,
        pix_0_2_0_0_0_load608_i_out_i,
        pix_0_2_0_0_0_load608_i_out_o,
        pix_0_2_0_0_0_load608_i_out_o_ap_vld,
        pix_0_1_0_0_0_load606_i_out_i,
        pix_0_1_0_0_0_load606_i_out_o,
        pix_0_1_0_0_0_load606_i_out_o_ap_vld,
        pix_0_0_0_0_0_load604_i_out_i,
        pix_0_0_0_0_0_load604_i_out_o,
        pix_0_0_0_0_0_load604_i_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] stream_out_hresampled_dout;
input  [4:0] stream_out_hresampled_num_data_valid;
input  [4:0] stream_out_hresampled_fifo_cap;
input   stream_out_hresampled_empty_n;
output   stream_out_hresampled_read;
output  [47:0] stream_out_vresampled_din;
input  [4:0] stream_out_vresampled_num_data_valid;
input  [4:0] stream_out_vresampled_fifo_cap;
input   stream_out_vresampled_full_n;
output   stream_out_vresampled_write;
input  [10:0] trunc_ln;
input  [0:0] p_read;
input  [0:0] cmp33_i;
input  [0:0] cmp105_i;
input  [0:0] empty_39;
input  [0:0] empty;
output  [10:0] linebuf_c_2_address0;
output   linebuf_c_2_ce0;
output   linebuf_c_2_we0;
output  [15:0] linebuf_c_2_d0;
output  [10:0] linebuf_c_2_address1;
output   linebuf_c_2_ce1;
input  [15:0] linebuf_c_2_q1;
output  [10:0] linebuf_y_address0;
output   linebuf_y_ce0;
output   linebuf_y_we0;
output  [15:0] linebuf_y_d0;
output  [10:0] linebuf_y_address1;
output   linebuf_y_ce1;
input  [15:0] linebuf_y_q1;
output  [10:0] linebuf_c_address0;
output   linebuf_c_ce0;
output   linebuf_c_we0;
output  [15:0] linebuf_c_d0;
input  [15:0] linebuf_c_q0;
input  [7:0] p_out_i;
output  [7:0] p_out_o;
output   p_out_o_ap_vld;
input  [7:0] p_out1_i;
output  [7:0] p_out1_o;
output   p_out1_o_ap_vld;
input  [7:0] p_out2_i;
output  [7:0] p_out2_o;
output   p_out2_o_ap_vld;
input  [7:0] p_out3_i;
output  [7:0] p_out3_o;
output   p_out3_o_ap_vld;
input  [7:0] pix_0_5_0_0_0_load614_i_out_i;
output  [7:0] pix_0_5_0_0_0_load614_i_out_o;
output   pix_0_5_0_0_0_load614_i_out_o_ap_vld;
input  [7:0] pix_0_4_0_0_0_load612_i_out_i;
output  [7:0] pix_0_4_0_0_0_load612_i_out_o;
output   pix_0_4_0_0_0_load612_i_out_o_ap_vld;
input  [7:0] pix_0_3_0_0_0_load610_i_out_i;
output  [7:0] pix_0_3_0_0_0_load610_i_out_o;
output   pix_0_3_0_0_0_load610_i_out_o_ap_vld;
input  [7:0] pix_0_2_0_0_0_load608_i_out_i;
output  [7:0] pix_0_2_0_0_0_load608_i_out_o;
output   pix_0_2_0_0_0_load608_i_out_o_ap_vld;
input  [7:0] pix_0_1_0_0_0_load606_i_out_i;
output  [7:0] pix_0_1_0_0_0_load606_i_out_o;
output   pix_0_1_0_0_0_load606_i_out_o_ap_vld;
input  [7:0] pix_0_0_0_0_0_load604_i_out_i;
output  [7:0] pix_0_0_0_0_0_load604_i_out_o;
output   pix_0_0_0_0_0_load604_i_out_o_ap_vld;

reg ap_idle;
reg stream_out_hresampled_read;
reg[47:0] stream_out_vresampled_din;
reg stream_out_vresampled_write;
reg linebuf_c_2_ce0;
reg linebuf_c_2_we0;
reg linebuf_c_2_ce1;
reg linebuf_y_ce0;
reg linebuf_y_we0;
reg linebuf_y_ce1;
reg linebuf_c_ce0;
reg linebuf_c_we0;
reg[7:0] p_out_o;
reg p_out_o_ap_vld;
reg[7:0] p_out1_o;
reg p_out1_o_ap_vld;
reg[7:0] p_out2_o;
reg p_out2_o_ap_vld;
reg[7:0] p_out3_o;
reg p_out3_o_ap_vld;
reg[7:0] pix_0_5_0_0_0_load614_i_out_o;
reg pix_0_5_0_0_0_load614_i_out_o_ap_vld;
reg[7:0] pix_0_4_0_0_0_load612_i_out_o;
reg pix_0_4_0_0_0_load612_i_out_o_ap_vld;
reg[7:0] pix_0_3_0_0_0_load610_i_out_o;
reg pix_0_3_0_0_0_load610_i_out_o_ap_vld;
reg[7:0] pix_0_2_0_0_0_load608_i_out_o;
reg pix_0_2_0_0_0_load608_i_out_o_ap_vld;
reg[7:0] pix_0_1_0_0_0_load606_i_out_o;
reg pix_0_1_0_0_0_load606_i_out_o_ap_vld;
reg[7:0] pix_0_0_0_0_0_load604_i_out_o;
reg pix_0_0_0_0_0_load604_i_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op100_write_state3;
reg    ap_predicate_op109_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1000_fu_230_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_out_vresampled_blk_n;
wire    ap_block_pp0_stage0;
reg    stream_out_hresampled_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [10:0] x_2_reg_691;
reg   [10:0] linebuf_y_addr_reg_700;
reg   [10:0] linebuf_c_2_addr_reg_711;
wire   [63:0] zext_ln1000_fu_247_p1;
wire   [7:0] trunc_ln1010_4_fu_287_p4;
wire   [7:0] trunc_ln1010_1_fu_257_p4;
wire   [7:0] trunc_ln1010_fu_253_p1;
reg   [10:0] x_fu_122;
wire   [10:0] add_ln1000_fu_236_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_x_2;
wire   [47:0] zext_ln1174_fu_612_p1;
reg    ap_block_pp0_stage0_01001;
wire   [47:0] p_0_fu_641_p7;
wire   [7:0] tmp_3_i_fu_384_p4;
wire   [7:0] trunc_ln1067_fu_380_p1;
wire   [7:0] select_ln1081_fu_433_p3;
wire   [7:0] select_ln1081_1_fu_440_p3;
wire   [7:0] select_ln1114_fu_447_p3;
wire   [7:0] select_ln1114_1_fu_454_p3;
wire   [7:0] trunc_ln1067_1_fu_394_p1;
wire   [8:0] shl_ln_fu_470_p3;
wire   [9:0] zext_ln1143_1_fu_482_p1;
wire   [9:0] zext_ln1143_fu_478_p1;
wire   [8:0] zext_ln1143_2_fu_486_p1;
wire   [8:0] add_ln1143_1_fu_496_p2;
wire   [9:0] zext_ln1143_3_fu_502_p1;
wire   [9:0] add_ln1143_fu_490_p2;
wire   [9:0] add_ln1143_2_fu_506_p2;
wire   [7:0] tmp_5_i_fu_398_p4;
wire   [8:0] shl_ln1143_1_fu_522_p3;
wire   [9:0] zext_ln1143_5_fu_534_p1;
wire   [9:0] zext_ln1143_4_fu_530_p1;
wire   [8:0] zext_ln1143_6_fu_538_p1;
wire   [8:0] add_ln1143_4_fu_548_p2;
wire   [9:0] zext_ln1143_7_fu_554_p1;
wire   [9:0] add_ln1143_3_fu_542_p2;
wire   [9:0] add_ln1143_5_fu_558_p2;
wire   [7:0] trunc_ln2_fu_512_p4;
wire   [7:0] trunc_ln1142_1_fu_564_p4;
wire   [7:0] empty_65_fu_581_p3;
wire   [7:0] tmp_11_i_fu_588_p4;
wire   [7:0] empty_64_fu_574_p3;
wire   [7:0] trunc_ln1028_fu_376_p1;
wire   [39:0] tmp_s_fu_598_p6;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_43;
reg    ap_enable_state2_pp0_iter1_stage0;
wire    ap_enable_operation_32;
wire    ap_enable_operation_59;
reg    ap_enable_state3_pp0_iter2_stage0;
wire    ap_enable_operation_29;
wire    ap_enable_operation_57;
wire    ap_enable_operation_70;
wire    ap_enable_operation_33;
wire    ap_enable_operation_62;
wire    ap_enable_operation_76;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 x_fu_122 = 11'd0;
#0 ap_done_reg = 1'b0;
end

bd_2d50_csc_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1000_fu_230_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_122 <= add_ln1000_fu_236_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_122 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        linebuf_c_2_addr_reg_711 <= zext_ln1000_fu_247_p1;
        linebuf_y_addr_reg_700 <= zext_ln1000_fu_247_p1;
        x_2_reg_691 <= ap_sig_allocacmp_x_2;
    end
end

always @ (*) begin
    if (((icmp_ln1000_fu_230_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_x_2 = 11'd0;
    end else begin
        ap_sig_allocacmp_x_2 = x_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_c_2_ce0 = 1'b1;
    end else begin
        linebuf_c_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_2_ce1 = 1'b1;
    end else begin
        linebuf_c_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_c_2_we0 = 1'b1;
    end else begin
        linebuf_c_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_ce0 = 1'b1;
    end else begin
        linebuf_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_we0 = 1'b1;
    end else begin
        linebuf_c_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_y_ce0 = 1'b1;
    end else begin
        linebuf_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_y_ce1 = 1'b1;
    end else begin
        linebuf_y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_y_we0 = 1'b1;
    end else begin
        linebuf_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_o = {{stream_out_hresampled_dout[31:24]}};
    end else begin
        p_out1_o = p_out1_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_o_ap_vld = 1'b1;
    end else begin
        p_out1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out2_o = {{stream_out_hresampled_dout[15:8]}};
    end else begin
        p_out2_o = p_out2_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out2_o_ap_vld = 1'b1;
    end else begin
        p_out2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out3_o = trunc_ln1010_fu_253_p1;
    end else begin
        p_out3_o = p_out3_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out3_o_ap_vld = 1'b1;
    end else begin
        p_out3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_o = {{stream_out_hresampled_dout[39:32]}};
    end else begin
        p_out_o = p_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_o_ap_vld = 1'b1;
    end else begin
        p_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_0_0_0_0_load604_i_out_o = trunc_ln1010_fu_253_p1;
    end else begin
        pix_0_0_0_0_0_load604_i_out_o = pix_0_0_0_0_0_load604_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_0_0_0_0_load604_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_0_0_0_0_load604_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_1_0_0_0_load606_i_out_o = {{stream_out_hresampled_dout[15:8]}};
    end else begin
        pix_0_1_0_0_0_load606_i_out_o = pix_0_1_0_0_0_load606_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_1_0_0_0_load606_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_1_0_0_0_load606_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_2_0_0_0_load608_i_out_o = {{stream_out_hresampled_dout[23:16]}};
    end else begin
        pix_0_2_0_0_0_load608_i_out_o = pix_0_2_0_0_0_load608_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_2_0_0_0_load608_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_2_0_0_0_load608_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_3_0_0_0_load610_i_out_o = {{stream_out_hresampled_dout[31:24]}};
    end else begin
        pix_0_3_0_0_0_load610_i_out_o = pix_0_3_0_0_0_load610_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_3_0_0_0_load610_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_3_0_0_0_load610_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_4_0_0_0_load612_i_out_o = {{stream_out_hresampled_dout[39:32]}};
    end else begin
        pix_0_4_0_0_0_load612_i_out_o = pix_0_4_0_0_0_load612_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_4_0_0_0_load612_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_4_0_0_0_load612_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_5_0_0_0_load614_i_out_o = {{stream_out_hresampled_dout[47:40]}};
    end else begin
        pix_0_5_0_0_0_load614_i_out_o = pix_0_5_0_0_0_load614_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_5_0_0_0_load614_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_5_0_0_0_load614_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_hresampled_blk_n = stream_out_hresampled_empty_n;
    end else begin
        stream_out_hresampled_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_hresampled_read = 1'b1;
    end else begin
        stream_out_hresampled_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op109_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op100_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        stream_out_vresampled_blk_n = stream_out_vresampled_full_n;
    end else begin
        stream_out_vresampled_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((ap_predicate_op109_write_state3 == 1'b1)) begin
            stream_out_vresampled_din = p_0_fu_641_p7;
        end else if ((ap_predicate_op100_write_state3 == 1'b1)) begin
            stream_out_vresampled_din = zext_ln1174_fu_612_p1;
        end else begin
            stream_out_vresampled_din = 'bx;
        end
    end else begin
        stream_out_vresampled_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op109_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op100_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        stream_out_vresampled_write = 1'b1;
    end else begin
        stream_out_vresampled_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1000_fu_236_p2 = (ap_sig_allocacmp_x_2 + 11'd1);

assign add_ln1143_1_fu_496_p2 = (zext_ln1143_2_fu_486_p1 + 9'd2);

assign add_ln1143_2_fu_506_p2 = (zext_ln1143_3_fu_502_p1 + add_ln1143_fu_490_p2);

assign add_ln1143_3_fu_542_p2 = (zext_ln1143_5_fu_534_p1 + zext_ln1143_4_fu_530_p1);

assign add_ln1143_4_fu_548_p2 = (zext_ln1143_6_fu_538_p1 + 9'd2);

assign add_ln1143_5_fu_558_p2 = (zext_ln1143_7_fu_554_p1 + add_ln1143_3_fu_542_p2);

assign add_ln1143_fu_490_p2 = (zext_ln1143_1_fu_482_p1 + zext_ln1143_fu_478_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((cmp33_i == 1'd1) & (stream_out_hresampled_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op109_write_state3 == 1'b1) & (stream_out_vresampled_full_n == 1'b0)) | ((ap_predicate_op100_write_state3 == 1'b1) & (stream_out_vresampled_full_n == 1'b0)));
end

assign ap_enable_operation_29 = (1'b1 == 1'b1);

assign ap_enable_operation_32 = (1'b1 == 1'b1);

assign ap_enable_operation_33 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_43 = (cmp33_i == 1'd1);
end

assign ap_enable_operation_57 = (1'b1 == 1'b1);

assign ap_enable_operation_59 = (1'b1 == 1'b1);

assign ap_enable_operation_62 = (1'b1 == 1'b1);

assign ap_enable_operation_70 = (1'b1 == 1'b1);

assign ap_enable_operation_76 = (1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state2_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op100_write_state3 = ((p_read == 1'd0) & (empty == 1'd0));
end

always @ (*) begin
    ap_predicate_op109_write_state3 = ((p_read == 1'd1) & (empty == 1'd0));
end

assign empty_64_fu_574_p3 = ((empty_39[0:0] == 1'b1) ? 8'd0 : trunc_ln2_fu_512_p4);

assign empty_65_fu_581_p3 = ((empty_39[0:0] == 1'b1) ? 8'd0 : trunc_ln1142_1_fu_564_p4);

assign icmp_ln1000_fu_230_p2 = ((ap_sig_allocacmp_x_2 == trunc_ln) ? 1'b1 : 1'b0);

assign linebuf_c_2_address0 = linebuf_c_2_addr_reg_711;

assign linebuf_c_2_address1 = zext_ln1000_fu_247_p1;

assign linebuf_c_2_d0 = {{select_ln1114_fu_447_p3}, {select_ln1114_1_fu_454_p3}};

assign linebuf_c_address0 = zext_ln1000_fu_247_p1;

assign linebuf_c_d0 = {{trunc_ln1010_4_fu_287_p4}, {trunc_ln1010_1_fu_257_p4}};

assign linebuf_y_address0 = linebuf_y_addr_reg_700;

assign linebuf_y_address1 = zext_ln1000_fu_247_p1;

assign linebuf_y_d0 = {{p_out1_i}, {p_out3_i}};

assign p_0_fu_641_p7 = {{{{{{pix_0_5_0_0_0_load614_i_out_i}, {pix_0_4_0_0_0_load612_i_out_i}}, {pix_0_3_0_0_0_load610_i_out_i}}, {pix_0_2_0_0_0_load608_i_out_i}}, {pix_0_1_0_0_0_load606_i_out_i}}, {pix_0_0_0_0_0_load604_i_out_i}};

assign select_ln1081_1_fu_440_p3 = ((cmp33_i[0:0] == 1'b1) ? p_out2_i : trunc_ln1067_fu_380_p1);

assign select_ln1081_fu_433_p3 = ((cmp33_i[0:0] == 1'b1) ? p_out_i : tmp_3_i_fu_384_p4);

assign select_ln1114_1_fu_454_p3 = ((cmp105_i[0:0] == 1'b1) ? trunc_ln1067_fu_380_p1 : select_ln1081_1_fu_440_p3);

assign select_ln1114_fu_447_p3 = ((cmp105_i[0:0] == 1'b1) ? tmp_3_i_fu_384_p4 : select_ln1081_fu_433_p3);

assign shl_ln1143_1_fu_522_p3 = {{tmp_3_i_fu_384_p4}, {1'd0}};

assign shl_ln_fu_470_p3 = {{trunc_ln1067_fu_380_p1}, {1'd0}};

assign tmp_11_i_fu_588_p4 = {{linebuf_y_q1[15:8]}};

assign tmp_3_i_fu_384_p4 = {{linebuf_c_q0[15:8]}};

assign tmp_5_i_fu_398_p4 = {{linebuf_c_2_q1[15:8]}};

assign tmp_s_fu_598_p6 = {{{{{empty_65_fu_581_p3}, {tmp_11_i_fu_588_p4}}, {8'd0}}, {empty_64_fu_574_p3}}, {trunc_ln1028_fu_376_p1}};

assign trunc_ln1010_1_fu_257_p4 = {{stream_out_hresampled_dout[15:8]}};

assign trunc_ln1010_4_fu_287_p4 = {{stream_out_hresampled_dout[39:32]}};

assign trunc_ln1010_fu_253_p1 = stream_out_hresampled_dout[7:0];

assign trunc_ln1028_fu_376_p1 = linebuf_y_q1[7:0];

assign trunc_ln1067_1_fu_394_p1 = linebuf_c_2_q1[7:0];

assign trunc_ln1067_fu_380_p1 = linebuf_c_q0[7:0];

assign trunc_ln1142_1_fu_564_p4 = {{add_ln1143_5_fu_558_p2[9:2]}};

assign trunc_ln2_fu_512_p4 = {{add_ln1143_2_fu_506_p2[9:2]}};

assign zext_ln1000_fu_247_p1 = x_2_reg_691;

assign zext_ln1143_1_fu_482_p1 = shl_ln_fu_470_p3;

assign zext_ln1143_2_fu_486_p1 = select_ln1081_1_fu_440_p3;

assign zext_ln1143_3_fu_502_p1 = add_ln1143_1_fu_496_p2;

assign zext_ln1143_4_fu_530_p1 = tmp_5_i_fu_398_p4;

assign zext_ln1143_5_fu_534_p1 = shl_ln1143_1_fu_522_p3;

assign zext_ln1143_6_fu_538_p1 = select_ln1081_fu_433_p3;

assign zext_ln1143_7_fu_554_p1 = add_ln1143_4_fu_548_p2;

assign zext_ln1143_fu_478_p1 = trunc_ln1067_1_fu_394_p1;

assign zext_ln1174_fu_612_p1 = tmp_s_fu_598_p6;

endmodule //bd_2d50_csc_0_v_vcresampler_core_Pipeline_VITIS_LOOP_1000_2
