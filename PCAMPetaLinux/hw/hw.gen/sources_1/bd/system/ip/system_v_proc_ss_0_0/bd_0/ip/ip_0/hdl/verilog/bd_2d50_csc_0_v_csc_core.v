// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module bd_2d50_csc_0_v_csc_core (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_in_hresampled_dout,
        stream_in_hresampled_num_data_valid,
        stream_in_hresampled_fifo_cap,
        stream_in_hresampled_empty_n,
        stream_in_hresampled_read,
        height_dout,
        height_num_data_valid,
        height_fifo_cap,
        height_empty_n,
        height_read,
        width_dout,
        width_num_data_valid,
        width_fifo_cap,
        width_empty_n,
        width_read,
        K11_read,
        K12_read,
        K13_read,
        K21_read,
        K22_read,
        K23_read,
        K31_read,
        K32_read,
        K33_read,
        ROffset_read,
        GOffset_read,
        BOffset_read,
        ClampMin_read,
        ClipMax_read,
        stream_csc_din,
        stream_csc_num_data_valid,
        stream_csc_fifo_cap,
        stream_csc_full_n,
        stream_csc_write,
        HwReg_width_c20_din,
        HwReg_width_c20_num_data_valid,
        HwReg_width_c20_fifo_cap,
        HwReg_width_c20_full_n,
        HwReg_width_c20_write,
        HwReg_height_c26_din,
        HwReg_height_c26_num_data_valid,
        HwReg_height_c26_fifo_cap,
        HwReg_height_c26_full_n,
        HwReg_height_c26_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] stream_in_hresampled_dout;
input  [4:0] stream_in_hresampled_num_data_valid;
input  [4:0] stream_in_hresampled_fifo_cap;
input   stream_in_hresampled_empty_n;
output   stream_in_hresampled_read;
input  [11:0] height_dout;
input  [2:0] height_num_data_valid;
input  [2:0] height_fifo_cap;
input   height_empty_n;
output   height_read;
input  [11:0] width_dout;
input  [2:0] width_num_data_valid;
input  [2:0] width_fifo_cap;
input   width_empty_n;
output   width_read;
input  [15:0] K11_read;
input  [15:0] K12_read;
input  [15:0] K13_read;
input  [15:0] K21_read;
input  [15:0] K22_read;
input  [15:0] K23_read;
input  [15:0] K31_read;
input  [15:0] K32_read;
input  [15:0] K33_read;
input  [9:0] ROffset_read;
input  [9:0] GOffset_read;
input  [9:0] BOffset_read;
input  [7:0] ClampMin_read;
input  [7:0] ClipMax_read;
output  [47:0] stream_csc_din;
input  [4:0] stream_csc_num_data_valid;
input  [4:0] stream_csc_fifo_cap;
input   stream_csc_full_n;
output   stream_csc_write;
output  [11:0] HwReg_width_c20_din;
input  [2:0] HwReg_width_c20_num_data_valid;
input  [2:0] HwReg_width_c20_fifo_cap;
input   HwReg_width_c20_full_n;
output   HwReg_width_c20_write;
output  [11:0] HwReg_height_c26_din;
input  [2:0] HwReg_height_c26_num_data_valid;
input  [2:0] HwReg_height_c26_fifo_cap;
input   HwReg_height_c26_full_n;
output   HwReg_height_c26_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_hresampled_read;
reg height_read;
reg width_read;
reg stream_csc_write;
reg HwReg_width_c20_write;
reg HwReg_height_c26_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    height_blk_n;
reg    width_blk_n;
reg    HwReg_width_c20_blk_n;
reg    HwReg_height_c26_blk_n;
reg    ap_block_state1;
reg   [10:0] loopWidth_reg_369;
wire   [21:0] offsetR_fu_247_p3;
reg   [21:0] offsetR_reg_374;
wire   [21:0] offsetG_fu_255_p3;
reg   [21:0] offsetG_reg_379;
wire   [21:0] offsetB_fu_263_p3;
reg   [21:0] offsetB_reg_384;
wire   [12:0] add_ln134_fu_275_p2;
reg   [12:0] add_ln134_reg_389;
wire    grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start;
wire    grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_done;
wire    grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_idle;
wire    grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_ready;
wire    grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_in_hresampled_read;
wire   [47:0] grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_csc_din;
wire    grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_csc_write;
reg    grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln134_fu_289_p2;
wire    ap_CS_fsm_state3;
reg   [12:0] y_fu_96;
wire   [12:0] y_7_fu_294_p2;
wire   [12:0] height_load_cast_fu_271_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start_reg = 1'b0;
#0 y_fu_96 = 13'd0;
end

bd_2d50_csc_0_v_csc_core_Pipeline_VITIS_LOOP_136_2 grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start),
    .ap_done(grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_done),
    .ap_idle(grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_idle),
    .ap_ready(grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_ready),
    .stream_in_hresampled_dout(stream_in_hresampled_dout),
    .stream_in_hresampled_num_data_valid(5'd0),
    .stream_in_hresampled_fifo_cap(5'd0),
    .stream_in_hresampled_empty_n(stream_in_hresampled_empty_n),
    .stream_in_hresampled_read(grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_in_hresampled_read),
    .stream_csc_din(grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_csc_din),
    .stream_csc_num_data_valid(5'd0),
    .stream_csc_fifo_cap(5'd0),
    .stream_csc_full_n(stream_csc_full_n),
    .stream_csc_write(grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_csc_write),
    .loopWidth_1(loopWidth_reg_369),
    .offsetR(offsetR_reg_374),
    .K12_load_cast(K12_read),
    .K13_load_cast(K13_read),
    .K11_load_cast(K11_read),
    .offsetG(offsetG_reg_379),
    .K22_load_cast(K22_read),
    .K23_load_cast(K23_read),
    .K21_load_cast(K21_read),
    .offsetB(offsetB_reg_384),
    .K32_load_cast(K32_read),
    .K33_load_cast(K33_read),
    .K31_load_cast(K31_read),
    .zext_ln134_1(ClampMin_read),
    .zext_ln134(ClipMax_read),
    .ClipMax_read(ClipMax_read),
    .ClampMin_read(ClampMin_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_289_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_289_p2 == 1'd0))) begin
            grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start_reg <= 1'b1;
        end else if ((grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_ready == 1'b1)) begin
            grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_96 <= 13'd1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_289_p2 == 1'd0))) begin
        y_fu_96 <= y_7_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln134_reg_389 <= add_ln134_fu_275_p2;
        loopWidth_reg_369 <= {{width_dout[11:1]}};
        offsetB_reg_384[21 : 12] <= offsetB_fu_263_p3[21 : 12];
        offsetG_reg_379[21 : 12] <= offsetG_fu_255_p3[21 : 12];
        offsetR_reg_374[21 : 12] <= offsetR_fu_247_p3[21 : 12];
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_c26_blk_n = HwReg_height_c26_full_n;
    end else begin
        HwReg_height_c26_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_c26_write = 1'b1;
    end else begin
        HwReg_height_c26_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_c20_blk_n = HwReg_width_c20_full_n;
    end else begin
        HwReg_width_c20_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_c20_write = 1'b1;
    end else begin
        HwReg_width_c20_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_289_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_289_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_csc_write = grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_csc_write;
    end else begin
        stream_csc_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        stream_in_hresampled_read = grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_in_hresampled_read;
    end else begin
        stream_in_hresampled_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln134_fu_289_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_height_c26_din = height_dout;

assign HwReg_width_c20_din = width_dout;

assign add_ln134_fu_275_p2 = (height_load_cast_fu_271_p1 + 13'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c26_full_n) | (1'b0 == HwReg_width_c20_full_n) | (ap_done_reg == 1'b1));
end

assign grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start = grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_ap_start_reg;

assign height_load_cast_fu_271_p1 = height_dout;

assign icmp_ln134_fu_289_p2 = ((y_fu_96 == add_ln134_reg_389) ? 1'b1 : 1'b0);

assign offsetB_fu_263_p3 = {{BOffset_read}, {12'd0}};

assign offsetG_fu_255_p3 = {{GOffset_read}, {12'd0}};

assign offsetR_fu_247_p3 = {{ROffset_read}, {12'd0}};

assign stream_csc_din = grp_v_csc_core_Pipeline_VITIS_LOOP_136_2_fu_212_stream_csc_din;

assign y_7_fu_294_p2 = (y_fu_96 + 13'd1);

always @ (posedge ap_clk) begin
    offsetR_reg_374[11:0] <= 12'b000000000000;
    offsetG_reg_379[11:0] <= 12'b000000000000;
    offsetB_reg_384[11:0] <= 12'b000000000000;
end

endmodule //bd_2d50_csc_0_v_csc_core
