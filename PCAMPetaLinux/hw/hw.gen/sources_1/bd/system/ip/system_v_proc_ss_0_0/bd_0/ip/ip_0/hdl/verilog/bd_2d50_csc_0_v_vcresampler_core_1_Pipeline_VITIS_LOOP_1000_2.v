// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module bd_2d50_csc_0_v_vcresampler_core_1_Pipeline_VITIS_LOOP_1000_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_dout,
        stream_in_num_data_valid,
        stream_in_fifo_cap,
        stream_in_empty_n,
        stream_in_read,
        stream_in_vresampled_din,
        stream_in_vresampled_num_data_valid,
        stream_in_vresampled_fifo_cap,
        stream_in_vresampled_full_n,
        stream_in_vresampled_write,
        trunc_ln,
        p_read,
        empty_40,
        empty_41,
        linebuf_y_address0,
        linebuf_y_ce0,
        linebuf_y_we0,
        linebuf_y_d0,
        linebuf_y_address1,
        linebuf_y_ce1,
        linebuf_y_q1,
        linebuf_y_1_address0,
        linebuf_y_1_ce0,
        linebuf_y_1_we0,
        linebuf_y_1_d0,
        linebuf_y_1_address1,
        linebuf_y_1_ce1,
        linebuf_y_1_q1,
        cmp105_i,
        linebuf_c_address0,
        linebuf_c_ce0,
        linebuf_c_we0,
        linebuf_c_d0,
        linebuf_c_address1,
        linebuf_c_ce1,
        linebuf_c_q1,
        linebuf_c_1_address0,
        linebuf_c_1_ce0,
        linebuf_c_1_we0,
        linebuf_c_1_d0,
        linebuf_c_1_address1,
        linebuf_c_1_ce1,
        linebuf_c_1_q1,
        empty,
        cmp33_i,
        p_out_i,
        p_out_o,
        p_out_o_ap_vld,
        p_out1_i,
        p_out1_o,
        p_out1_o_ap_vld,
        p_out2_i,
        p_out2_o,
        p_out2_o_ap_vld,
        p_out3_i,
        p_out3_o,
        p_out3_o_ap_vld,
        pix_0_5_0_0_0_load614_i_out_i,
        pix_0_5_0_0_0_load614_i_out_o,
        pix_0_5_0_0_0_load614_i_out_o_ap_vld,
        pix_0_4_0_0_0_load612_i_out_i,
        pix_0_4_0_0_0_load612_i_out_o,
        pix_0_4_0_0_0_load612_i_out_o_ap_vld,
        pix_0_3_0_0_0_load610_i_out_i,
        pix_0_3_0_0_0_load610_i_out_o,
        pix_0_3_0_0_0_load610_i_out_o_ap_vld,
        pix_0_2_0_0_0_load608_i_out_i,
        pix_0_2_0_0_0_load608_i_out_o,
        pix_0_2_0_0_0_load608_i_out_o_ap_vld,
        pix_0_1_0_0_0_load606_i_out_i,
        pix_0_1_0_0_0_load606_i_out_o,
        pix_0_1_0_0_0_load606_i_out_o_ap_vld,
        pix_0_0_0_0_0_load604_i_out_i,
        pix_0_0_0_0_0_load604_i_out_o,
        pix_0_0_0_0_0_load604_i_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [47:0] stream_in_dout;
input  [4:0] stream_in_num_data_valid;
input  [4:0] stream_in_fifo_cap;
input   stream_in_empty_n;
output   stream_in_read;
output  [47:0] stream_in_vresampled_din;
input  [4:0] stream_in_vresampled_num_data_valid;
input  [4:0] stream_in_vresampled_fifo_cap;
input   stream_in_vresampled_full_n;
output   stream_in_vresampled_write;
input  [10:0] trunc_ln;
input  [0:0] p_read;
input  [0:0] empty_40;
input  [0:0] empty_41;
output  [10:0] linebuf_y_address0;
output   linebuf_y_ce0;
output   linebuf_y_we0;
output  [15:0] linebuf_y_d0;
output  [10:0] linebuf_y_address1;
output   linebuf_y_ce1;
input  [15:0] linebuf_y_q1;
output  [10:0] linebuf_y_1_address0;
output   linebuf_y_1_ce0;
output   linebuf_y_1_we0;
output  [15:0] linebuf_y_1_d0;
output  [10:0] linebuf_y_1_address1;
output   linebuf_y_1_ce1;
input  [15:0] linebuf_y_1_q1;
input  [0:0] cmp105_i;
output  [10:0] linebuf_c_address0;
output   linebuf_c_ce0;
output   linebuf_c_we0;
output  [15:0] linebuf_c_d0;
output  [10:0] linebuf_c_address1;
output   linebuf_c_ce1;
input  [15:0] linebuf_c_q1;
output  [10:0] linebuf_c_1_address0;
output   linebuf_c_1_ce0;
output   linebuf_c_1_we0;
output  [15:0] linebuf_c_1_d0;
output  [10:0] linebuf_c_1_address1;
output   linebuf_c_1_ce1;
input  [15:0] linebuf_c_1_q1;
input  [0:0] empty;
input  [0:0] cmp33_i;
input  [7:0] p_out_i;
output  [7:0] p_out_o;
output   p_out_o_ap_vld;
input  [7:0] p_out1_i;
output  [7:0] p_out1_o;
output   p_out1_o_ap_vld;
input  [7:0] p_out2_i;
output  [7:0] p_out2_o;
output   p_out2_o_ap_vld;
input  [7:0] p_out3_i;
output  [7:0] p_out3_o;
output   p_out3_o_ap_vld;
input  [7:0] pix_0_5_0_0_0_load614_i_out_i;
output  [7:0] pix_0_5_0_0_0_load614_i_out_o;
output   pix_0_5_0_0_0_load614_i_out_o_ap_vld;
input  [7:0] pix_0_4_0_0_0_load612_i_out_i;
output  [7:0] pix_0_4_0_0_0_load612_i_out_o;
output   pix_0_4_0_0_0_load612_i_out_o_ap_vld;
input  [7:0] pix_0_3_0_0_0_load610_i_out_i;
output  [7:0] pix_0_3_0_0_0_load610_i_out_o;
output   pix_0_3_0_0_0_load610_i_out_o_ap_vld;
input  [7:0] pix_0_2_0_0_0_load608_i_out_i;
output  [7:0] pix_0_2_0_0_0_load608_i_out_o;
output   pix_0_2_0_0_0_load608_i_out_o_ap_vld;
input  [7:0] pix_0_1_0_0_0_load606_i_out_i;
output  [7:0] pix_0_1_0_0_0_load606_i_out_o;
output   pix_0_1_0_0_0_load606_i_out_o_ap_vld;
input  [7:0] pix_0_0_0_0_0_load604_i_out_i;
output  [7:0] pix_0_0_0_0_0_load604_i_out_o;
output   pix_0_0_0_0_0_load604_i_out_o_ap_vld;

reg ap_idle;
reg stream_in_read;
reg[47:0] stream_in_vresampled_din;
reg stream_in_vresampled_write;
reg linebuf_y_ce0;
reg linebuf_y_we0;
reg linebuf_y_ce1;
reg linebuf_y_1_ce0;
reg linebuf_y_1_we0;
reg linebuf_y_1_ce1;
reg linebuf_c_ce0;
reg linebuf_c_we0;
reg linebuf_c_ce1;
reg linebuf_c_1_ce0;
reg linebuf_c_1_we0;
reg linebuf_c_1_ce1;
reg[7:0] p_out_o;
reg p_out_o_ap_vld;
reg[7:0] p_out1_o;
reg p_out1_o_ap_vld;
reg[7:0] p_out2_o;
reg p_out2_o_ap_vld;
reg[7:0] p_out3_o;
reg p_out3_o_ap_vld;
reg[7:0] pix_0_5_0_0_0_load614_i_out_o;
reg pix_0_5_0_0_0_load614_i_out_o_ap_vld;
reg[7:0] pix_0_4_0_0_0_load612_i_out_o;
reg pix_0_4_0_0_0_load612_i_out_o_ap_vld;
reg[7:0] pix_0_3_0_0_0_load610_i_out_o;
reg pix_0_3_0_0_0_load610_i_out_o_ap_vld;
reg[7:0] pix_0_2_0_0_0_load608_i_out_o;
reg pix_0_2_0_0_0_load608_i_out_o_ap_vld;
reg[7:0] pix_0_1_0_0_0_load606_i_out_o;
reg pix_0_1_0_0_0_load606_i_out_o_ap_vld;
reg[7:0] pix_0_0_0_0_0_load604_i_out_o;
reg pix_0_0_0_0_0_load604_i_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln1000_reg_757;
reg    ap_predicate_op32_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_predicate_op110_write_state3;
reg    ap_predicate_op119_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1000_fu_271_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_in_vresampled_blk_n;
wire    ap_block_pp0_stage0;
reg    stream_in_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_reg_724;
reg   [10:0] out_x_reg_752;
reg   [0:0] icmp_ln1000_reg_757_pp0_iter1_reg;
reg   [10:0] linebuf_y_addr_reg_761;
reg   [10:0] linebuf_y_1_addr_reg_767;
reg   [10:0] linebuf_c_addr_reg_773;
reg   [10:0] linebuf_c_1_addr_reg_779;
reg   [7:0] ap_phi_mux_empty_66_phi_fu_248_p4;
wire   [7:0] select_ln1081_1_fu_527_p3;
wire   [7:0] ap_phi_reg_pp0_iter2_empty_66_reg_245;
wire   [7:0] trunc_ln1067_fu_467_p1;
reg   [7:0] ap_phi_mux_empty_67_phi_fu_257_p4;
wire   [7:0] select_ln1081_fu_519_p3;
wire   [7:0] ap_phi_reg_pp0_iter2_empty_67_reg_254;
wire   [7:0] tmp_9_i_fu_472_p4;
wire   [63:0] zext_ln1000_fu_288_p1;
wire   [7:0] trunc_ln1010_fu_295_p1;
reg   [10:0] x_fu_118;
wire   [10:0] add_ln1000_fu_277_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_out_x;
wire   [47:0] zext_ln1174_fu_665_p1;
reg    ap_block_pp0_stage0_01001;
wire   [47:0] p_0_fu_694_p7;
wire   [7:0] tmp_6_i_fu_421_p4;
wire   [7:0] trunc_ln1028_fu_417_p1;
wire   [7:0] select_ln1045_fu_444_p3;
wire   [7:0] select_ln1045_1_fu_451_p3;
wire   [7:0] tmp_2_i_fu_487_p4;
wire   [7:0] trunc_ln1067_2_fu_483_p1;
wire   [7:0] select_ln1069_fu_497_p3;
wire   [7:0] select_ln1069_1_fu_504_p3;
wire   [7:0] select_ln1114_fu_544_p3;
wire   [7:0] select_ln1114_1_fu_551_p3;
wire   [8:0] zext_ln1155_fu_567_p1;
wire   [8:0] add_ln1155_fu_575_p2;
wire   [8:0] zext_ln1155_1_fu_571_p1;
wire   [8:0] add_ln1155_1_fu_581_p2;
wire   [8:0] zext_ln1155_2_fu_597_p1;
wire   [8:0] add_ln1155_2_fu_605_p2;
wire   [8:0] zext_ln1155_3_fu_601_p1;
wire   [8:0] add_ln1155_3_fu_611_p2;
wire   [7:0] trunc_ln1_fu_587_p4;
wire   [7:0] trunc_ln1154_1_fu_617_p4;
wire   [7:0] empty_69_fu_634_p3;
wire   [7:0] tmp_4_i_fu_641_p4;
wire   [7:0] empty_68_fu_627_p3;
wire   [7:0] trunc_ln1028_1_fu_431_p1;
wire   [39:0] tmp_6_fu_651_p6;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_52;
reg    ap_enable_state2_pp0_iter1_stage0;
reg    ap_enable_operation_60;
reg    ap_enable_state3_pp0_iter2_stage0;
reg    ap_enable_operation_73;
reg    ap_enable_operation_53;
reg    ap_enable_operation_63;
reg    ap_enable_operation_74;
reg    ap_enable_operation_56;
reg    ap_enable_operation_69;
reg    ap_predicate_op86_store_state3;
reg    ap_enable_operation_86;
reg    ap_enable_operation_57;
reg    ap_enable_operation_72;
reg    ap_predicate_op91_store_state3;
reg    ap_enable_operation_91;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 x_fu_118 = 11'd0;
#0 ap_done_reg = 1'b0;
end

bd_2d50_csc_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1000_fu_271_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            x_fu_118 <= add_ln1000_fu_277_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            x_fu_118 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln1000_reg_757 <= icmp_ln1000_fu_271_p2;
        icmp_ln1000_reg_757_pp0_iter1_reg <= icmp_ln1000_reg_757;
        linebuf_c_1_addr_reg_779 <= zext_ln1000_fu_288_p1;
        linebuf_c_addr_reg_773 <= zext_ln1000_fu_288_p1;
        linebuf_y_1_addr_reg_767 <= zext_ln1000_fu_288_p1;
        linebuf_y_addr_reg_761 <= zext_ln1000_fu_288_p1;
        out_x_reg_752 <= ap_sig_allocacmp_out_x;
    end
end

always @ (*) begin
    if (((icmp_ln1000_fu_271_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0)) begin
        if ((tmp_reg_724 == 1'd1)) begin
            ap_phi_mux_empty_66_phi_fu_248_p4 = trunc_ln1067_fu_467_p1;
        end else if ((empty == 1'd0)) begin
            ap_phi_mux_empty_66_phi_fu_248_p4 = select_ln1081_1_fu_527_p3;
        end else begin
            ap_phi_mux_empty_66_phi_fu_248_p4 = ap_phi_reg_pp0_iter2_empty_66_reg_245;
        end
    end else begin
        ap_phi_mux_empty_66_phi_fu_248_p4 = ap_phi_reg_pp0_iter2_empty_66_reg_245;
    end
end

always @ (*) begin
    if ((icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0)) begin
        if ((tmp_reg_724 == 1'd1)) begin
            ap_phi_mux_empty_67_phi_fu_257_p4 = {{linebuf_c_q1[15:8]}};
        end else if ((empty == 1'd0)) begin
            ap_phi_mux_empty_67_phi_fu_257_p4 = select_ln1081_fu_519_p3;
        end else begin
            ap_phi_mux_empty_67_phi_fu_257_p4 = ap_phi_reg_pp0_iter2_empty_67_reg_254;
        end
    end else begin
        ap_phi_mux_empty_67_phi_fu_257_p4 = ap_phi_reg_pp0_iter2_empty_67_reg_254;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_out_x = 11'd0;
    end else begin
        ap_sig_allocacmp_out_x = x_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_c_1_ce0 = 1'b1;
    end else begin
        linebuf_c_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_1_ce1 = 1'b1;
    end else begin
        linebuf_c_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0) & (empty == 1'd0))) begin
        linebuf_c_1_we0 = 1'b1;
    end else begin
        linebuf_c_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_c_ce0 = 1'b1;
    end else begin
        linebuf_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_c_ce1 = 1'b1;
    end else begin
        linebuf_c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (empty == 1'd0))) begin
        linebuf_c_we0 = 1'b1;
    end else begin
        linebuf_c_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_y_1_ce0 = 1'b1;
    end else begin
        linebuf_y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_y_1_ce1 = 1'b1;
    end else begin
        linebuf_y_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_1_we0 = 1'b1;
    end else begin
        linebuf_y_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuf_y_ce0 = 1'b1;
    end else begin
        linebuf_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_y_ce1 = 1'b1;
    end else begin
        linebuf_y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0))) begin
        linebuf_y_we0 = 1'b1;
    end else begin
        linebuf_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_o = {{stream_in_dout[31:24]}};
    end else begin
        p_out1_o = p_out1_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_o_ap_vld = 1'b1;
    end else begin
        p_out1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out2_o = {{stream_in_dout[15:8]}};
    end else begin
        p_out2_o = p_out2_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out2_o_ap_vld = 1'b1;
    end else begin
        p_out2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out3_o = trunc_ln1010_fu_295_p1;
    end else begin
        p_out3_o = p_out3_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out3_o_ap_vld = 1'b1;
    end else begin
        p_out3_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_o = {{stream_in_dout[39:32]}};
    end else begin
        p_out_o = p_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_o_ap_vld = 1'b1;
    end else begin
        p_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_0_0_0_0_load604_i_out_o = trunc_ln1010_fu_295_p1;
    end else begin
        pix_0_0_0_0_0_load604_i_out_o = pix_0_0_0_0_0_load604_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_0_0_0_0_load604_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_0_0_0_0_load604_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_1_0_0_0_load606_i_out_o = {{stream_in_dout[15:8]}};
    end else begin
        pix_0_1_0_0_0_load606_i_out_o = pix_0_1_0_0_0_load606_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_1_0_0_0_load606_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_1_0_0_0_load606_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_2_0_0_0_load608_i_out_o = {{stream_in_dout[23:16]}};
    end else begin
        pix_0_2_0_0_0_load608_i_out_o = pix_0_2_0_0_0_load608_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_2_0_0_0_load608_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_2_0_0_0_load608_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_3_0_0_0_load610_i_out_o = {{stream_in_dout[31:24]}};
    end else begin
        pix_0_3_0_0_0_load610_i_out_o = pix_0_3_0_0_0_load610_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_3_0_0_0_load610_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_3_0_0_0_load610_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_4_0_0_0_load612_i_out_o = {{stream_in_dout[39:32]}};
    end else begin
        pix_0_4_0_0_0_load612_i_out_o = pix_0_4_0_0_0_load612_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_4_0_0_0_load612_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_4_0_0_0_load612_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_5_0_0_0_load614_i_out_o = {{stream_in_dout[47:40]}};
    end else begin
        pix_0_5_0_0_0_load614_i_out_o = pix_0_5_0_0_0_load614_i_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pix_0_5_0_0_0_load614_i_out_o_ap_vld = 1'b1;
    end else begin
        pix_0_5_0_0_0_load614_i_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op32_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_blk_n = stream_in_empty_n;
    end else begin
        stream_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op32_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_read = 1'b1;
    end else begin
        stream_in_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op119_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_predicate_op110_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        stream_in_vresampled_blk_n = stream_in_vresampled_full_n;
    end else begin
        stream_in_vresampled_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((ap_predicate_op119_write_state3 == 1'b1)) begin
            stream_in_vresampled_din = p_0_fu_694_p7;
        end else if ((ap_predicate_op110_write_state3 == 1'b1)) begin
            stream_in_vresampled_din = zext_ln1174_fu_665_p1;
        end else begin
            stream_in_vresampled_din = 'bx;
        end
    end else begin
        stream_in_vresampled_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op119_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_predicate_op110_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        stream_in_vresampled_write = 1'b1;
    end else begin
        stream_in_vresampled_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1000_fu_277_p2 = (ap_sig_allocacmp_out_x + 11'd1);

assign add_ln1155_1_fu_581_p2 = (add_ln1155_fu_575_p2 + zext_ln1155_1_fu_571_p1);

assign add_ln1155_2_fu_605_p2 = (zext_ln1155_2_fu_597_p1 + 9'd1);

assign add_ln1155_3_fu_611_p2 = (add_ln1155_2_fu_605_p2 + zext_ln1155_3_fu_601_p1);

assign add_ln1155_fu_575_p2 = (zext_ln1155_fu_567_p1 + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op32_read_state2 == 1'b1) & (stream_in_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op119_write_state3 == 1'b1) & (stream_in_vresampled_full_n == 1'b0)) | ((ap_predicate_op110_write_state3 == 1'b1) & (stream_in_vresampled_full_n == 1'b0)));
end

always @ (*) begin
    ap_enable_operation_52 = (icmp_ln1000_reg_757 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_53 = (icmp_ln1000_reg_757 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_56 = (icmp_ln1000_reg_757 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_57 = (icmp_ln1000_reg_757 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_60 = (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_63 = (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_69 = (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_72 = (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_73 = (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_74 = (icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_86 = (ap_predicate_op86_store_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_91 = (ap_predicate_op91_store_state3 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state2_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state3_pp0_iter2_stage0 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter2_empty_66_reg_245 = 'bx;

assign ap_phi_reg_pp0_iter2_empty_67_reg_254 = 'bx;

always @ (*) begin
    ap_predicate_op110_write_state3 = ((p_read == 1'd0) & (empty_41 == 1'd0));
end

always @ (*) begin
    ap_predicate_op119_write_state3 = ((p_read == 1'd1) & (empty_41 == 1'd0));
end

always @ (*) begin
    ap_predicate_op32_read_state2 = ((cmp33_i == 1'd1) & (icmp_ln1000_reg_757 == 1'd0));
end

always @ (*) begin
    ap_predicate_op86_store_state3 = ((cmp33_i == 1'd1) & (empty == 1'd0));
end

always @ (*) begin
    ap_predicate_op91_store_state3 = ((icmp_ln1000_reg_757_pp0_iter1_reg == 1'd0) & (empty == 1'd0));
end

assign empty_68_fu_627_p3 = ((empty_40[0:0] == 1'b1) ? trunc_ln1_fu_587_p4 : select_ln1069_1_fu_504_p3);

assign empty_69_fu_634_p3 = ((empty_40[0:0] == 1'b1) ? trunc_ln1154_1_fu_617_p4 : select_ln1069_fu_497_p3);

assign icmp_ln1000_fu_271_p2 = ((ap_sig_allocacmp_out_x == trunc_ln) ? 1'b1 : 1'b0);

assign linebuf_c_1_address0 = linebuf_c_1_addr_reg_779;

assign linebuf_c_1_address1 = zext_ln1000_fu_288_p1;

assign linebuf_c_1_d0 = {{select_ln1114_fu_544_p3}, {select_ln1114_1_fu_551_p3}};

assign linebuf_c_address0 = linebuf_c_addr_reg_773;

assign linebuf_c_address1 = zext_ln1000_fu_288_p1;

assign linebuf_c_d0 = {{p_out_i}, {p_out2_i}};

assign linebuf_y_1_address0 = linebuf_y_1_addr_reg_767;

assign linebuf_y_1_address1 = zext_ln1000_fu_288_p1;

assign linebuf_y_1_d0 = {{select_ln1045_fu_444_p3}, {select_ln1045_1_fu_451_p3}};

assign linebuf_y_address0 = linebuf_y_addr_reg_761;

assign linebuf_y_address1 = zext_ln1000_fu_288_p1;

assign linebuf_y_d0 = {{p_out1_i}, {p_out3_i}};

assign p_0_fu_694_p7 = {{{{{{pix_0_5_0_0_0_load614_i_out_i}, {pix_0_4_0_0_0_load612_i_out_i}}, {pix_0_3_0_0_0_load610_i_out_i}}, {pix_0_2_0_0_0_load608_i_out_i}}, {pix_0_1_0_0_0_load606_i_out_i}}, {pix_0_0_0_0_0_load604_i_out_i}};

assign select_ln1045_1_fu_451_p3 = ((cmp105_i[0:0] == 1'b1) ? trunc_ln1028_fu_417_p1 : p_out3_i);

assign select_ln1045_fu_444_p3 = ((cmp105_i[0:0] == 1'b1) ? tmp_6_i_fu_421_p4 : p_out1_i);

assign select_ln1069_1_fu_504_p3 = ((empty[0:0] == 1'b1) ? trunc_ln1067_2_fu_483_p1 : trunc_ln1067_fu_467_p1);

assign select_ln1069_fu_497_p3 = ((empty[0:0] == 1'b1) ? tmp_2_i_fu_487_p4 : tmp_9_i_fu_472_p4);

assign select_ln1081_1_fu_527_p3 = ((cmp33_i[0:0] == 1'b1) ? p_out2_i : select_ln1069_1_fu_504_p3);

assign select_ln1081_fu_519_p3 = ((cmp33_i[0:0] == 1'b1) ? p_out_i : select_ln1069_fu_497_p3);

assign select_ln1114_1_fu_551_p3 = ((cmp105_i[0:0] == 1'b1) ? select_ln1069_1_fu_504_p3 : select_ln1081_1_fu_527_p3);

assign select_ln1114_fu_544_p3 = ((cmp105_i[0:0] == 1'b1) ? select_ln1069_fu_497_p3 : select_ln1081_fu_519_p3);

assign tmp_2_i_fu_487_p4 = {{linebuf_c_1_q1[15:8]}};

assign tmp_4_i_fu_641_p4 = {{linebuf_y_1_q1[15:8]}};

assign tmp_6_fu_651_p6 = {{{{{empty_69_fu_634_p3}, {tmp_4_i_fu_641_p4}}, {8'd0}}, {empty_68_fu_627_p3}}, {trunc_ln1028_1_fu_431_p1}};

assign tmp_6_i_fu_421_p4 = {{linebuf_y_q1[15:8]}};

assign tmp_9_i_fu_472_p4 = {{linebuf_c_q1[15:8]}};

assign tmp_reg_724 = empty;

assign trunc_ln1010_fu_295_p1 = stream_in_dout[7:0];

assign trunc_ln1028_1_fu_431_p1 = linebuf_y_1_q1[7:0];

assign trunc_ln1028_fu_417_p1 = linebuf_y_q1[7:0];

assign trunc_ln1067_2_fu_483_p1 = linebuf_c_1_q1[7:0];

assign trunc_ln1067_fu_467_p1 = linebuf_c_q1[7:0];

assign trunc_ln1154_1_fu_617_p4 = {{add_ln1155_3_fu_611_p2[8:1]}};

assign trunc_ln1_fu_587_p4 = {{add_ln1155_1_fu_581_p2[8:1]}};

assign zext_ln1000_fu_288_p1 = out_x_reg_752;

assign zext_ln1155_1_fu_571_p1 = ap_phi_mux_empty_66_phi_fu_248_p4;

assign zext_ln1155_2_fu_597_p1 = select_ln1069_fu_497_p3;

assign zext_ln1155_3_fu_601_p1 = ap_phi_mux_empty_67_phi_fu_257_p4;

assign zext_ln1155_fu_567_p1 = select_ln1069_1_fu_504_p3;

assign zext_ln1174_fu_665_p1 = tmp_6_fu_651_p6;

endmodule //bd_2d50_csc_0_v_vcresampler_core_1_Pipeline_VITIS_LOOP_1000_2
